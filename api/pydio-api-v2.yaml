swagger: '2.0'
host: localhost
schemes:
  - http
basePath: /api/v2
info:
  version: 2.0.0
  title: Pydio API V2
  description: Access to a Pydio Server. Second version of the API.

paths:
  '/fs/{path}':
    get:
      x-pydio-plugin: access.fs
      x-pydio-action: "ls"
      description: >
        Get information about a node and its metadata. By default, it will
        return 

        Pydio "primary" metadata (stat, internal informations). Extended
        metadata can

        be added by some plugins.  

        For collections (folders), pass the **children** parameter to list its
        content.  

        To access the actual content of the nodes, see the I/O API.
      parameters:
        - $ref: '#/parameters/pathParameter'
        - name: meta
          in: query
          description: Level of precision for expected metadata
          type: string
          enum:
            - minimal
            - standard
            - extended
          required: true
          default: standard
        - name: children
          in: query
          description: Load children if node is a collection
          required: false
          type: string
          enum:
            - dfz
            - d
            - df
            - f
            - fz
            - z
            - dz
        - name: recursive
          in: formData
          description: 'If requiring children, load grandchildren recursively'
          type: boolean
          required: false
        - name: max_depth
          in: formData
          description: >-
            If requiring children recursively, stop at the given depth. If -1,
            no limit.
          type: integer
          required: false
          default: -1
        - name: max_nodes
          in: formData
          description: >-
            If requiring children recursively, stop at the given depth. If -1,
            no limit.
          type: integer
          required: false
          default: -1
        - name: remote_order
          in: formData
          description: Apply server-side sorting
          type: boolean
          required: false
          default: false
        - name: order_column
          in: formData
          description: Order column to use for server-side sorting
          type: string
          required: false
        - name: order_direction
          in: formData
          description: Order direction to use for server-side sorting (asc or desc)
          type: string
          required: false
        - name: page_position
          in: formData
          description: >-
            For a single file, try to detect the page position in the parent
            node listing.
          type: boolean
          required: false
          default: false
        - name: X-Indexation-Required
          in: header
          description: Invalidate current index and trigger a background indexation
          type: boolean
          required: false
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Node'
      tags: ["File Api"]
    post:
      x-pydio-plugin: access.fs
      x-pydio-action: "fs_create_resource"
      description: >
        Create new resources or move/copy existing resources:

        + Create a new folder (pass a path **with a trailing slash**), or a new
        empty file (no trailing slash).

        + Copy a resource to a new destination: pass destination as {path}, and
        origin via copy_from parameter.

        + Rename / Move a resource : basically a copy operation followed by a
        delete of original
      parameters:
        - $ref: '#/parameters/pathParameter'
        - name: copy_source
          in: query
          description: 'If it''s a move or a copy, indicated the path of the original node'
          type: string
          required: false
        - name: delete_source
          in: query
          description: 'If it''s a move/rename, will remove original after copy operation'
          required: false
          type: boolean
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/PydioResponse'
      tags: ["File Api"]
    patch:
      x-pydio-plugin: access.fs
      x-pydio-action: "fs_update_metadata"
      description: >
        Update existing resources metadata (see I/O for content modification).
        Basic metadata is provided

        by core plugins, but they can be extended by other plugins.

        For example :

        `{"core": {"chmod": 777}}, {"user_meta":[{"metaName":"metaValue"}]}`

        `{"bookmarks":{"bookmarked": true}, "locks":{"locked":true},
        "meta.watch":{"watch":true}}`

        etc...
      parameters:
        - $ref: '#/parameters/pathParameter'
        - name: metadata
          in: formData
          description: Json-serialized metadata to update
          type: string
          required: true
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/PydioResponse'
      tags: ["File Api"]
    delete:
      x-pydio-plugin: access.fs
      x-pydio-action: "delete"
      description: |
        Delete existing resource
      parameters:
        - $ref: '#/parameters/pathParameter'
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/PydioResponse'
      tags: ["File Api"]
  '/io/{path}':
    get:
      x-pydio-plugin: access.fs
      x-pydio-action: "download"
      description: >
        Get resource content. Depending on the attachment parameter, will try to
        either trigger a download,

        or send binary stream with appropriate headers.

        Depending on the active plugins, may be able to serve:

        + Plain text

        + MP3/Wav Stream

        + MP4 Stream

        + On-the-fly generated images

        + On-the-fly generated thumbnails for images or pdf
      parameters:
        - $ref: '#/parameters/pathParameter'
        - name: attachment
          in: query
          description: >-
            if set, send back a force-download, otherwise use Accept header to
            try to find the best response Content-Type.
          type: boolean
          required: false
        - name: additional_parameters
          in: query
          description: >-
            some plugin can take more parameters to send various contents
            derived from main resource. For example, for images, you can pass
            get_thumb & dimension
          type: string
          required: false
      produces:
        - application/octet-stream
      responses:
        '200':
          description: Successful Response
          schema:
            type: file
      tags: ["File Api"]
    put:
      x-pydio-plugin: access.fs
      x-pydio-action: "upload"
      description: |
        Create resource by posting to Input Stream
      parameters:
        - $ref: '#/parameters/pathParameter'
        - name: inputStream
          in: body
          description: binary data
          required: true
          schema:
            $ref: '#/definitions/InputStream'
      responses:
        '200':
          description: Successful Response
          schema:
            $ref: '#/definitions/PydioResponse'
      tags: ["File Api"]
    post:
      x-pydio-plugin: access.fs
      x-pydio-action: "upload"
      description: |
        Create resource by posting via form Data
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/pathParameter'
        - name: file
          in: formData
          description: File to upload
          required: true
          type: file
      responses:
        '200':
          description: Successful Response
          schema:
            $ref: '#/definitions/PydioResponse'
      tags: ["File Api"]
    patch:
      x-pydio-plugin: access.fs
      x-pydio-action: "upload"
      description: |
        Update existing resource via form Data
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/pathParameter'
        - name: append
          in: formData
          description: >-
            wether to replace content or append at the end of the existing
            resource
          required: true
          default: true
          type: boolean
        - name: file
          in: formData
          description: File to upload
          required: true
          type: file
      responses:
        '200':
          description: Successful Response
          schema:
            $ref: '#/definitions/PydioResponse'
      tags: ["File Api"]
  '/tasks':
    get:
      description:  |
        List tasks currently running on the server (and visible to the current user).
      parameters:
        - $ref: '#/parameters/workspaceIdFormParameter'
        - $ref: '#/parameters/nodeSelectionParameter'
      responses:
        '200':
          description: Successful Response
          schema:
            $ref: '#/definitions/PydioResponse'
      tags: ["Task Api"]
    post:
      description: >
        Create a task on the server. This will generally trigger a server-side background "Task", which ID will
        be returned in the PydioResponse['tasks'] array

      parameters:
        - name: taskName
          in: query
          description: Task to launch on the server
          type: string
          enum:
            - index
            - purge
            - restore
            - mkdir
            - resync
          required: true
        - $ref: '#/parameters/workspaceIdFormParameter'
        - $ref: '#/parameters/nodeSelectionParameter'
      responses:
        '200':
          description: Successful Response
          schema:
            $ref: '#/definitions/Task'
      tags: ["Task Api"]
  '/tasks/{taskId}':
    get:
      description:  |
        Get information about a currently running task Id
      parameters:
        - name: taskId
          in: path
          description: Task to monitor on the server
          type: string
          required: true
        - $ref: '#/parameters/workspaceIdFormParameter'
        - $ref: '#/parameters/nodeSelectionParameter'
      responses:
        '200':
          description: Successful Response
          schema:
            $ref: '#/definitions/Task'
      tags: ["Task Api"]
  '/workspaces':
    get:
      description: |
        List accessible workspace for currently logged user. Alias for /state/?xPath=user/repositories
      produces:
        - application/json
      x-pydio-plugin: meta.quota
      x-pydio-action: monitor_quota
      responses:
        '200':
          description: Successful Response
          schema:
            type: object
            properties:
              USAGE:
                type: integer
              TOTAL:
                type: integer
      tags: ["Workspace Api"]
  '/workspaces/{workspaceId}':
    get:
      description: |
        Get information about the given workspace.
        Info can be gathered via various plugins. Pass the expected metadata type via the X-Pydio-Ws-Info header. Currently supported values are quota|info|changes
      produces:
        - application/json
      parameters:
        - name: X-Pydio-WS-Info
          in: header
          required: true
          type: string
          enum:
            - quota
            - info
        - $ref: '#/parameters/workspaceIdParameter'
      x-pydio-plugin: meta.quota
      x-pydio-action: monitor_quota
      responses:
        '200':
          description: Successful Response
          schema:
            type: object
            properties:
              USAGE:
                type: integer
              TOTAL:
                type: integer
      tags: ["Workspace Api"]
  '/workspaces/{workspaceId}/changes/{sequenceId}':
    get:
      description: |
        All changes since a given sequence ID

      produces:
        - application/json

      parameters:
        - name: sequenceId
          in: path
          description: File to upload
          required: true
          type: integer
        - $ref: '#/parameters/workspaceIdParameter'

      x-pydio-plugin: meta.syncable
      x-pydio-action: changes
      responses:
        '200':
          description: Successful Response
          schema:
            type: object
            properties:
              USAGE:
                type: integer
              TOTAL:
                type: integer
      tags: ["Workspace Api"]
parameters:
  pathParameter:
    name: path
    in: path
    description: Workspace id or alias + full path to the node
    required: true
    type: string
  workspaceIdParameter:
    name: workspaceId
    in: path
    description: Id or Alias of the workspace
    required: true
    type: string
  workspaceIdFormParameter:
    name: workspaceId
    in: formData
    description: Id or Alias of the workspace
    required: true
    type: string
  nodeSelectionParameter:
    name: path
    in: formData
    description: One or more node pathes
    required: false
    type: array
    items:
      type: string
    collectionFormat: multi
definitions:
  PydioResponse:
    title: PydioResponse
    description: Generic container for messages after successful operations or errors
    type: object
    properties:
      message:
        type: string
      level:
        type: string
      errorCode:
        type: integer
      nodesDiff:
        $ref: '#/definitions/NodesDiff'
      bgAction:
        $ref: '#/definitions/BgAction'
      tasks:
        type: array
        items:
          $ref: '#/definitions/Task'
  Task:
    title: Task
    description: Background operation started on the server. It's the client mission to check it on
      a regular basis.
    type: object
    properties:
      id:
        type: string
      status:
        type: integer
      label:
        type: string
      description:
        type: string
  BgAction:
    title: BgAction
    description: triggers a background action on the client side
    type: object
    properties:
      actionName:
        type: string
      delay:
        type: integer
  Node:
    title: Node
    description: >-
      A file or folder represented as a generic resource, including metadata and
      children. Properties before children are part of the "standard" metadat
      set, properties after are returned by the "extended" metadata set.
    type: object
    properties:
      path:
        type: string
      is_leaf:
        type: boolean
      label:
        type: string
      ajxp_modiftime:
        type: integer
      bytesize:
        type: integer
      children:
        $ref: '#/definitions/NodeList'
      stat:
        type: object
      ajxp_relativetime:
        type: string
      ajxp_description:
        type: string
      icon:
        type: string
      filesize:
        type: string
      mimestring_id:
        type: string
      ajxp_readonly:
        type: boolean
      file_perms:
        type: string
      repo_has_recycle:
        type: boolean
      childrenPagination:
        $ref: '#/definitions/PaginationData'
  NodesDiff:
    title: NodesDiff
    description: Description of node removed / added / updated in the backend
    type: object
    properties:
      add:
        type: array
        items:
          $ref: '#/definitions/Node'
      update:
        type: array
        description: Nodes may have an additional attribute original_path
        items:
          $ref: '#/definitions/Node'
      remove:
        type: array
        items:
          type: string
  NodeList:
    title: NodeList
    description: List of Node objects
    type: array
    items:
      $ref: '#/definitions/Node'
  PaginationData:
    title: PaginationData
    description: >-
      Additional metadata attached to a NodeList for pagination. Could be sent
      through headers instead.
    type: object
    properties:
      count:
        type: integer
        description: total number of children
      current:
        type: integer
        description: current page
      total:
        type: integer
        description: total number of pages
      dirs:
        type: integer
        description: total number of "collection" childrens
      remoteSort:
        type: object
        description: additional attributes describing current server-side sorting
  InputStream:
    title: InputStream
    description: Simple binary stream
    type: string